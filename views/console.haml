<!DOCTYPE html>
%html{:lang=>:en}
  %head
    %title #{@app_name} Console
    %link{:rel=>:stylesheet, :type=>'text/css', :href=>'/stylesheets/bootstrap.css'}
    %link{:rel=>:stylesheet, :type=>'text/css', :href=>'/stylesheets/bootstrap-responsive.css'}
    %link{:rel=>:stylesheet, :type=>'text/css', :href=>'/stylesheets/console.css'}
    %link{:rel=>:stylesheet, :type=>'text/css', :href=>'/stylesheets/sticky.css'}

    %script{:type=>'text/javascript',:src => '/javascripts/jquery.js'}
    %script{:type=>'text/javascript',:src => '/javascripts/jquery.formparams.js'}
    %script{:type=>'text/javascript',:src => '/javascripts/sb.sample.payload.js'}
    %script{:type=>'text/javascript',:src => '/javascripts/sticky.js'}

  %body
    .container
      %h3 SupportBee Apps Console: #{@app_name}
      %hr
      %form{:id=>:app_form}
        .row

          .span4
            %h4 Settings
            - @schema.each_pair do |param, options|
              - input_options = {}
              - input_options[:label] = options['label'] ? options['label'] : param.humanize
              - input_options[:as] = :checkbox if options['type'] == 'boolean'
              - input_options[:as] = :password if options['type'] == 'password'
              - input_options[:as] = :text if input_options[:as].nil?

              - name = "data[settings][#{param}]"

              %label{:for => name} #{input_options[:label]}
              %input{:type => input_options[:as], :value => input_options[:default], :name => name } 

          .span4
            %h4 Auth
            %p
              These values are used by the app platform to make API calls to the SupportBee. This is disabled in development/test mode.
            %p
              %b SupportBee Test Subdomain:
              %br
              %input{:type => :hidden, :value => :test, :name => "data[auth][subdomain]"}
              test

            %p
              %b SupportBee Auth Token:
              %br
              %input{:type => :hidden, :value => :abc, :name => "data[auth][auth_token]"}
              ***********

          .span4
            .section
              %h4 Trigger Event
              .controls
                %select{:name=>:event_selector}
                  %option{:value => 'ticket.created'} Ticket Created
                  %option{:value => 'agent.reply.created'} Agent Reply Created
                  %option{:value => 'customer.reply.created'} Customer Reply Created
                  %option{:value => 'comment.created'} Comment Created
                %input{:id=>'event-submit', :type=>:submit, :class=>'btn btn-primary', :value => 'Go'}

            //-if @config['action'] and @config['action']['button']
            //  .section
            //    %h4 Trigger Action Button
            //    %input{:id=>'action-button-submit', :type=>:submit, :class=>'btn btn-primary', :value => @config['action']['button']['label']}
              
    :javascript
      $(document).ready(function(){
        $('#event-submit').click(function(){
          post_data = $('#app_form').formParams();
          selected_event = post_data.event_selector;
          delete post_data['event_selector'];
          post_data.payload = SamplePayload[selected_event];
          post_url = "/#{@app_slug}/event/" + selected_event;
          $.ajax({
            type: 'POST',
            url: post_url,
            data: JSON.stringify(post_data),
            success: event_submit_success,
            beforeSend: event_submit_before_send,
            error: event_submit_error,
            dataType: 'json'
          });
          return false;
        });

       function event_submit_success(data, textStatus, jqXHR){
          $.sticky('<b class="green">Event Posted</b>');
       }

       function event_submit_before_send(jqXHR, settings){
          console.log(settings);
          $.sticky('<b>Posting event</b>');
       }

       function event_submit_error(data, textStatus, errorThrown){
          $.sticky('<b class="red">Event Failed</b>');
       }
      });
